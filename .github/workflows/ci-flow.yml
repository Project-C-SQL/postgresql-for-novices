on: [push, pull_request]

jobs:
  push_flow:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    services:
      postgres:
        image: postgres:14.5-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install
      - run: poetry run pytest
        env:
          PGPORT: 5432
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: postgres

      - run: |
          poetry run -- bash -c 'echo a && mypy src --show-error-codes --show-error-context --no-error-summary;
          echo b && black src --check;
          echo c && isort "src"/**/*.py -m 3 --trailing-comma -c;
          echo d && pylint src --exit-zero'

      - run: |
          poetry run sphinx-apidoc -q -f -o docs/api src/pg4n '*/test*' && \
          poetry run sphinx-build -q -b html docs docs/build && \
          touch docs/build/.nojekyll
        if: github.ref == 'refs/heads/main'

      - uses: JamesIves/github-pages-deploy-action@v4
        if: github.ref == 'refs/heads/main'
        with:
          token: ${{ secrets.BOT_SECRET }}
          repository-name: Project-C-SQL/Project-C-SQL.github.io
          folder: docs/build
          git-config-name: github-actions
          git-config-email: <>

  grade:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    # outputs:
    #   grade: ${{ steps.grade.outputs.grade }}

    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install
      - run: echo grade=$(poetry run scripts/ci-grade.sh) >> $GITHUB_OUTPUT
        id: grade

  pr_comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: grade

    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ${{ steps.grade.outputs.grade }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_SECRET }}
        id: grade
